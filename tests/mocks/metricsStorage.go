// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MetricsStorage is an autogenerated mock type for the metricsStorage type
type MetricsStorage struct {
	mock.Mock
}

type MetricsStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsStorage) EXPECT() *MetricsStorage_Expecter {
	return &MetricsStorage_Expecter{mock: &_m.Mock}
}

// GetAllMetrics provides a mock function with given fields:
func (_m *MetricsStorage) GetAllMetrics() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetricsStorage_GetAllMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMetrics'
type MetricsStorage_GetAllMetrics_Call struct {
	*mock.Call
}

// GetAllMetrics is a helper method to define mock.On call
func (_e *MetricsStorage_Expecter) GetAllMetrics() *MetricsStorage_GetAllMetrics_Call {
	return &MetricsStorage_GetAllMetrics_Call{Call: _e.mock.On("GetAllMetrics")}
}

func (_c *MetricsStorage_GetAllMetrics_Call) Run(run func()) *MetricsStorage_GetAllMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsStorage_GetAllMetrics_Call) Return(_a0 string) *MetricsStorage_GetAllMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsStorage_GetAllMetrics_Call) RunAndReturn(run func() string) *MetricsStorage_GetAllMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricByName provides a mock function with given fields: metricName
func (_m *MetricsStorage) GetMetricByName(metricName string) (float64, error) {
	ret := _m.Called(metricName)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(metricName)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(metricName)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetricsStorage_GetMetricByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricByName'
type MetricsStorage_GetMetricByName_Call struct {
	*mock.Call
}

// GetMetricByName is a helper method to define mock.On call
//   - metricName string
func (_e *MetricsStorage_Expecter) GetMetricByName(metricName interface{}) *MetricsStorage_GetMetricByName_Call {
	return &MetricsStorage_GetMetricByName_Call{Call: _e.mock.On("GetMetricByName", metricName)}
}

func (_c *MetricsStorage_GetMetricByName_Call) Run(run func(metricName string)) *MetricsStorage_GetMetricByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MetricsStorage_GetMetricByName_Call) Return(_a0 float64, _a1 error) *MetricsStorage_GetMetricByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetricsStorage_GetMetricByName_Call) RunAndReturn(run func(string) (float64, error)) *MetricsStorage_GetMetricByName_Call {
	_c.Call.Return(run)
	return _c
}

// SortMetricByName provides a mock function with given fields:
func (_m *MetricsStorage) SortMetricByName() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MetricsStorage_SortMetricByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortMetricByName'
type MetricsStorage_SortMetricByName_Call struct {
	*mock.Call
}

// SortMetricByName is a helper method to define mock.On call
func (_e *MetricsStorage_Expecter) SortMetricByName() *MetricsStorage_SortMetricByName_Call {
	return &MetricsStorage_SortMetricByName_Call{Call: _e.mock.On("SortMetricByName")}
}

func (_c *MetricsStorage_SortMetricByName_Call) Run(run func()) *MetricsStorage_SortMetricByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsStorage_SortMetricByName_Call) Return(_a0 []string) *MetricsStorage_SortMetricByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsStorage_SortMetricByName_Call) RunAndReturn(run func() []string) *MetricsStorage_SortMetricByName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetricValue provides a mock function with given fields: metricType, metricName, value
func (_m *MetricsStorage) UpdateMetricValue(metricType string, metricName string, value float64) {
	_m.Called(metricType, metricName, value)
}

// MetricsStorage_UpdateMetricValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetricValue'
type MetricsStorage_UpdateMetricValue_Call struct {
	*mock.Call
}

// UpdateMetricValue is a helper method to define mock.On call
//   - metricType string
//   - metricName string
//   - value float64
func (_e *MetricsStorage_Expecter) UpdateMetricValue(metricType interface{}, metricName interface{}, value interface{}) *MetricsStorage_UpdateMetricValue_Call {
	return &MetricsStorage_UpdateMetricValue_Call{Call: _e.mock.On("UpdateMetricValue", metricType, metricName, value)}
}

func (_c *MetricsStorage_UpdateMetricValue_Call) Run(run func(metricType string, metricName string, value float64)) *MetricsStorage_UpdateMetricValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MetricsStorage_UpdateMetricValue_Call) Return() *MetricsStorage_UpdateMetricValue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsStorage_UpdateMetricValue_Call) RunAndReturn(run func(string, string, float64)) *MetricsStorage_UpdateMetricValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsStorage creates a new instance of MetricsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsStorage {
	mock := &MetricsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
